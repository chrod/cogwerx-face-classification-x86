## Base image
# cudabase image is aarch64/ubuntu, with NVIDIA CUDA libs, L4T28 JetPack31
# Build with docker --squash (experimental)
FROM x86-cudabase:latest

## tensorflow backend installation
RUN apt-get update

RUN apt-get install -y aptitude \
  apt-utils \
  build-essential \
  cmake \
  git \
  pkg-config \
  python3-pip \ 
  python3-dev \
  software-properties-common \
  vim \
  wget \
  x11-utils

## Install Tensorflow from JetsonHacks repo
# (Replaces RUN pip3 install tensorflow-gpu)
RUN pip3 install --upgrade pip
RUN apt-get install -y libcupti-dev
RUN pip3 install --no-cache-dir tensorflow-gpu

# Pillow dependencies
RUN apt-get install -y libblas-dev \
  liblapack-dev \
  libjpeg-dev \
  libpng-dev \
  libtiff-dev \
  libjasper-dev \
  libdc1394-22-dev \
  libgtk2.0-dev \
  libhdf5-dev \
  libhdf5-serial-dev \
  libpng-dev \
  libavcodec-dev \
  libavformat-dev \
  libswscale-dev \
  libtbb2 \ 
  libtbb-dev \
  python3-matplotlib \
  zlib1g-dev

### Keras dependencies
#### dependencies (optional -?)
RUN pip3 install --no-cache-dir graphviz pydot pandas Pillow numpy scipy keras
RUN export CC=h5cc
RUN HDF5_DIR=/usr/lib/aarch64-linux-gnu/hdf5/serial/ pip3 install --no-cache-dir h5py

# More libs (TODO: move to big install block)
RUN apt-get install -y libgphoto2-dev libavresample-dev libv4l-dev
RUN pip3 install pytest

#This worked in a container with opencv
WORKDIR /root/src
RUN git clone https://github.com/opencv/opencv.git --branch 3.1.0
WORKDIR /root/src/opencv
RUN git config user.email nuculur@gmail.com
RUN git config user.name chrod
RUN git stash
RUN git cherry-pick 10896
RUN git cherry-pick cdb9c
RUN git cherry-pick 24dbb
WORKDIR /root/src
RUN git clone https://github.com/opencv/opencv_extra.git --branch 3.1.0
COPY cv3.1/OpenCVDetectCUDA.cmake /root/src/opencv/cmake/
RUN mkdir -p /root/src/opencv/build
WORKDIR /root/src/opencv/build
RUN cmake -D CMAKE_BUILD_TYPE=Release \
      -D INSTALL_C_EXAMPLES=OFF \
      -D CUDA_FAST_MATH=ON \
      -D WITH_CUDA=ON \
      -D CUDA_ARCH_BIN="8.0" \
      -D INSTALL_PYTHON_EXAMPLES=OFF \
      -D CUDA_GENERATION=Pascal \
      -D WITH_V4L=ON \
      -D CMAKE_BUILD_TYPE=Release \
      -D PYTHON3_EXECUTABLE=/usr/bin/python3.5 \
      -D PYTHON_INCLUDE_DIR=/usr/include/python3.5 \
      -D PYTHON_INCLUDE_DIR2=/usr/include/x86_64-linux-gnu/python3.5m \
      -D PYTHON_LIBRARY=/usr/lib/x86_64-linux-gnu/libpython3.5m.so \
      -D PYTHON3_NUMPY_INCLUDE_DIRS=/usr/local/lib/python3.5/dist-packages/numpy/core/include \
      -D CMAKE_INSTALL_PREFIX=/usr/local ..
RUN make -j5
RUN make install
RUN echo "/usr/local/lib" > /etc/ld.so.conf.d/opencv.conf
RUN cp /root/src/opencv/build/lib/python3/cv2.cpython-35m-aarch64-linux-gnu.so /usr/local/lib/python3.5/dist-packages/cv2.cpython-35m-aarch64-linux-gnu.so

### Install face classification
RUN mkdir -p /root/src
WORKDIR /root/src
RUN git clone https://github.com/oarriaga/face_classification
# Replace examples with ones that access video1 (USB camera)
COPY src/*.py face_classification/src/
WORKDIR /root/src/face_classification/src

## Clean up (remove ~6GB space)
RUN rm -rf /var/cuda-repo-8-0-local/*.deb
RUN rm -rf /usr/local/cuda-8.0/doc/*
RUN find /root/src/opencv/ -maxdepth 1 -type d \! -name "build" -not -path "/root/src/opencv/" | xargs rm -rf
RUN find /usr/local/cuda-8.0/samples/ -iname "[13-9]*" -type d | xargs rm -rf
RUN rm -rf /root/src/opencv/build/modules/
